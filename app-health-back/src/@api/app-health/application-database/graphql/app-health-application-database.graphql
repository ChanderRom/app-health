
type AppHealthApplicationDatabase
{
    id: ID!
    applicationId: ID!
    application: AppHealthApplication
    databaseId: ID!
    database: AppHealthDatabase
    applicationInfrastructureServiceId: ID!
    applicationInfrastructureService: AppHealthApplicationInfrastructureService
    version: GraphQLString!
    size: GraphQLInt!
    score: GraphQLInt!
    totalCollectionTables: GraphQLInt!
    totalFields: GraphQLInt!
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input AppHealthCreateApplicationDatabaseInput
{
    id: ID!
    applicationId: ID!
    databaseId: ID!
    applicationInfrastructureServiceId: ID!
    version: GraphQLString!
    size: GraphQLInt!
    score: GraphQLInt!
    totalCollectionTables: GraphQLInt!
    totalFields: GraphQLInt!
}

input AppHealthUpdateApplicationDatabaseByIdInput
{
    id: ID!
    applicationId: ID
    databaseId: ID
    applicationInfrastructureServiceId: ID
    version: GraphQLString
    size: GraphQLInt
    score: GraphQLInt
    totalCollectionTables: GraphQLInt
    totalFields: GraphQLInt
}

input AppHealthUpdateApplicationDatabasesInput
{
    id: ID
    applicationId: ID
    databaseId: ID
    applicationInfrastructureServiceId: ID
    version: GraphQLString
    size: GraphQLInt
    score: GraphQLInt
    totalCollectionTables: GraphQLInt
    totalFields: GraphQLInt
}

type Query
{
    appHealthFindApplicationDatabase(
        query: QueryStatement
        constraint: QueryStatement
    ): AppHealthApplicationDatabase

    appHealthFindApplicationDatabaseById(
        id: ID
        constraint: QueryStatement
    ): AppHealthApplicationDatabase

    appHealthGetApplicationDatabases(
        query: QueryStatement
        constraint: QueryStatement
    ): [AppHealthApplicationDatabase]!

    appHealthPaginateApplicationDatabases(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    appHealthCreateApplicationDatabase(
        payload: AppHealthCreateApplicationDatabaseInput!
    ): AppHealthApplicationDatabase

    appHealthCreateApplicationDatabases(
        payload: [AppHealthCreateApplicationDatabaseInput]!
    ): Boolean!

    appHealthUpdateApplicationDatabaseById(
        payload: AppHealthUpdateApplicationDatabaseByIdInput!
        constraint: QueryStatement
    ): AppHealthApplicationDatabase

    appHealthUpdateApplicationDatabases(
        payload: AppHealthUpdateApplicationDatabasesInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [AppHealthApplicationDatabase]!

    appHealthUpsertApplicationDatabase(
        payload: AppHealthUpdateApplicationDatabaseByIdInput!
    ): AppHealthApplicationDatabase

    appHealthDeleteApplicationDatabaseById(
        id: ID!
        constraint: QueryStatement
    ): AppHealthApplicationDatabase

    appHealthDeleteApplicationDatabases(
        query: QueryStatement
        constraint: QueryStatement
    ): [AppHealthApplicationDatabase]!

}